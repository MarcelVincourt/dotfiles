--local status_ok, cmp = pcall(require, "cmp")
--if not status_ok then
--  return
--end

local cmp = require'cmp'


local status_ok, lspkind = pcall(require, "lspkind")
if not status_ok then
  return
end

local check_backspace = function()
	local col = vim.fn.col(".") - 1
	return col == 0 or vim.fn.getline("."):sub(col, col):match("%s")
end

cmp.setup {
    mapping = cmp.mapping.preset.insert({
        ["<C-d>"] = cmp.mapping.scroll_docs(-4),
        ["<C-f>"] = cmp.mapping.scroll_docs(4),
        ["<C-e>"] = cmp.mapping.close(),
        ["<c-y>"] = cmp.mapping.confirm {
            behavior = cmp.ConfirmBehavior.Insert,
            select = true,
        },
        --{'i', 'c'}),
        ['<Down>'] = cmp.mapping(cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Select }), {'i'}),
        ['<Up>'] = cmp.mapping(cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Select }), {'i'}),
        ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
        ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
        ['<Tab>'] = function(fallback)
                if cmp.visible() then
                    cmp.select_next_item()
                elseif check_backspace() then
                    fallback()
                else
                    fallback()
                end
            end,
        --end,
        ['<S-Tab>'] = function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
                else
                    fallback()
                end
            end,
    }),
    --formatting = {
    --    format = lspkind.cmp_format {
    --        with_text = true,
    --        menu = {
    --            buffer   = "[buf]",
    --            nvim_lsp = "[LSP]",
    --            path     = "[path]",
    --        },
    --    },
    --},

    sources = cmp.config.sources({
        { name = "nvim_lsp"},
        { name = "path"},
        { name = "buffer" , keyword_length = 5},
    })
    --experimental = {
    --    ghost_text = true
    --}
}
